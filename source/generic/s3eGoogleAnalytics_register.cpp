/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eGoogleAnalytics_autodefs.h"
#include "s3eEdk.h"
#include "s3eGoogleAnalytics.h"
//Declarations of Init and Term functions
extern s3eResult s3eGoogleAnalyticsInit();
extern void s3eGoogleAnalyticsTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void s3eGoogleAnalytics_SetScreenName_wrap(const char* screen_name)
{
    IwTrace(GOOGLEANALYTICS_VERBOSE, ("calling s3eGoogleAnalytics func on main thread: s3eGoogleAnalytics_SetScreenName"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eGoogleAnalytics_SetScreenName, 1, screen_name);
}

static void s3eGoogleAnalytics_SetUserID_wrap(const char* user_name)
{
    IwTrace(GOOGLEANALYTICS_VERBOSE, ("calling s3eGoogleAnalytics func on main thread: s3eGoogleAnalytics_SetUserID"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eGoogleAnalytics_SetUserID, 1, user_name);
}

static void s3eGoogleAnalytics_SetLogLevel_wrap(s3eGoogleAnalyticsLogLevel level)
{
    IwTrace(GOOGLEANALYTICS_VERBOSE, ("calling s3eGoogleAnalytics func on main thread: s3eGoogleAnalytics_SetLogLevel"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eGoogleAnalytics_SetLogLevel, 1, level);
}

#define s3eGoogleAnalytics_SetScreenName s3eGoogleAnalytics_SetScreenName_wrap
#define s3eGoogleAnalytics_SetUserID s3eGoogleAnalytics_SetUserID_wrap
#define s3eGoogleAnalytics_SetLogLevel s3eGoogleAnalytics_SetLogLevel_wrap

#endif

void s3eGoogleAnalyticsRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[3];
    funcPtrs[0] = (void*)s3eGoogleAnalytics_SetScreenName;
    funcPtrs[1] = (void*)s3eGoogleAnalytics_SetUserID;
    funcPtrs[2] = (void*)s3eGoogleAnalytics_SetLogLevel;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[3] = { 0 };

    /*
     * Register the extension
     */
s3eEdkRegister("s3eGoogleAnalytics", funcPtrs, sizeof(funcPtrs), flags, s3eGoogleAnalyticsInit, s3eGoogleAnalyticsTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eGoogleAnalyticsStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eGoogleAnalyticsRegisterExt;
    return 0;
}

int g_s3eGoogleAnalyticsVal = s3eGoogleAnalyticsStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eGoogleAnalyticsRegisterExt();
}
#endif

#endif
